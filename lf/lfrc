# interpreter for shell commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 4

set hidden true
set icons true
set ignorecase true
set drawbox true
set globsearch true
# MAYBE: set number and relativenumber
set tapstop 4

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# map d
# map dd delete

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
# cmd open &{{
#     case $(file --mime-type -Lb $f) in
#         text/*) lf -remote "send $id \$$EDITOR \$fx";;
#         *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
#     esac
# }}
cmd open &{{
	mimetype=$(file --brief --dereference --mime-type $f)
		defapp=$(xdg-mime query default $mimetype)
	case "$defapp" in
		nvim.desktop)
			lf -remote "send $id \$nvim $f"
			;;
		vim.desktop)
			lf -remote "send $id \$vim $f"
			;;
		*)
			xdg-open $f
			esac
}}

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# TODO: Look at this
# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %trash-put $fx
# cmd trash %set -f; mv $fx ~/.local/share/Trash/files

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.cbz) unzip $f;;
        *.rar) unrar x $f;;
        *.cbr) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd fzf_search ${{
RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
res="$(
FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
	fzf --bind "change:reload:$RG_PREFIX {q} || true" \
		--ansi --layout=reverse --header 'Search in files' \
		| cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
		)"
		[ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

map <f-2> $printf '%s\n' "$fx" | vidir -
# cmd bulk-rename ${{
#     old="$(mktemp)"
#     new="$(mktemp)"
#     if [ -n "$fs" ]; then
#         fs="$(basename -a $fs)"
#     else
#         fs="$(ls)"
#     fi
#     printf '%s\n' "$fs" >"$old"
#     printf '%s\n' "$fs" >"$new"
#     $EDITOR "$new"
#     [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
#     paste "$old" "$new" | while IFS= read -r names; do
#         src="$(printf '%s' "$names" | cut -f1)"
#         dst="$(printf '%s' "$names" | cut -f2)"
#         if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
#             continue
#         fi
#         mv -- "$src" "$dst"
#     done
#     rm -- "$old" "$new"
#     lf -remote "send $id unselect"
# }}

cmd follow_link %{{
	lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow_link

map <c-z> $ kill -STOP $PPID

# Change the binding for launching a shell to "s" unless the "s" key is useful

